use crate::rand::uniform::Uniform701;
use std::f64::consts::PI;

pub struct BoxMullerGaussian701 {
    /// The uniform random source
    uniform: Uniform701,
    /// The second value generated by the algorithm,
    /// or None if two new values need to be generated,
    stashed_second_value: Option<f64>,
}

impl BoxMullerGaussian701 {
    /// Construct a new BoxMullerGaussian701
    pub fn new(uniform: Uniform701) -> Self {
        Self {
            uniform,
            stashed_second_value: None,
        }
    }

    /// Get the next random number normally distributed with mean 0 and deviation...  actually, I don't know...
    pub fn next(&mut self) -> f64 {
        let (ret_val, to_stash) = match self.stashed_second_value {
            Some(previously_stashed) => (previously_stashed, None),
            None => {
                // Generate two new uniform random variables
                let u1 = self.uniform.next();
                let u2 = self.uniform.next();

                // Calculate the common values
                let r = (-2.0 * u1.ln()).sqrt();
                let t = 2.0 * PI * u2;

                // Generate two new gaussian random variables
                let x = r * t.cos();
                let y = r * t.sin();

                (x, Some(y))
            }
        };
        self.stashed_second_value = to_stash;
        ret_val
    }
}
