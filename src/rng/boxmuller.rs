use crate::rng::uniform::Uniform701;
use std::f64::consts::PI;

pub struct BoxMullerGaussian701 {
    /// The uniform random source
    uniform : Uniform701,
    /// The second value generated by the algorithm,
    /// or None if two new values need to be generated,
    stashed_second_value: Option<(f64, f64)>
}

impl BoxMullerGaussian701 {

    /// Construct a new BoxMullerGaussian701
    pub fn new(uniform : Uniform701) -> Self {
        Self {
            uniform,
            stashed_second_value: None
        }
    }

    /// Get the next random number normally distributed with mean 0 and deviation...  actually, I don't know...
    ///
    /// Note that this method returns a pair of values.
    /// The first is the normally distributed rng, and the second is one of the uniform values used to generate this normal.
    pub fn next(&mut self) -> (f64, f64) {
        let (ret_val, to_stash) = match self.stashed_second_value {
            Some(previously_stashed) => (previously_stashed, None),
            None => {
                // Generate two new uniform random variables
                let u1 = self.uniform.next();
                let u2 = self.uniform.next();

                // Calculate the common values
                let a = (-2_f64 * u1.ln()).sqrt();
                let b = 2_f64 * PI * u2;

                // Generate two new gaussian random variables
                let x = a * b.cos();
                let y = a * b.sin();

                ((x, u1), Some((y, u2)))
            }
        };
        self.stashed_second_value = to_stash;
        ret_val
    }
}